
def ProfileMostProbableK_mer(Text, k, prof):
    """Given a profile matrix Profile, we can evaluate the probability of every k-mer in a string Text and find a Profile-most probable k-mer in Text, i.e., a k-mer that was most likely to have been generated by Profile among all k-mers in Text. For example, ACGGGGATTACC is the Profile-most probable 12-mer in GGTACGGGGATTACCT. Indeed, every other 12-mer in this string has probability 0. In general, if there are multiple Profile-most probable k-mers in Text, then we select the first such k-mer occurring in Text.

    Args:
        Text (string): the DNA
        k (integer): as in k-mer
        prof (2D list): profile matrix of probability distribution

    Returns:
        string: most probable k-mer
    """
    # most_probable_k_mer = ""
    most_probable_k_mer = Text[:k]
    max_p = 0.0
    for i in range(len(Text)-k+1):
        
        probability = 1.0
        for j, nucleotide in enumerate(Text[i:i+k]):
            if nucleotide == 'A':
                probability *= prof[0][j]
            if nucleotide == 'C':
                probability *= prof[1][j]
            if nucleotide == 'G':
                probability *= prof[2][j]
            if nucleotide == 'T':
                probability *= prof[3][j]
        if max_p < probability:
            most_probable_k_mer = Text[i:i+k]
            max_p = probability
    return most_probable_k_mer


if __name__ == "__main__":
    filename = 'W3/Datasets/dataset_159_3.txt'
    with open(filename, "r") as dataset:
        data = []
        for line in dataset:
            data.append(line.strip())
        Text = data[0]
        k = int(data[1])
        raw_profile = data[2:]
        bases = ['A', 'C', 'G', 'T']
        prof = [list(map(float, raw_profile[i].split())) for i in range(len(raw_profile))]
        prof_dict = dict(zip(bases, prof))
    
    print(ProfileMostProbableK_mer(Text, k, prof))